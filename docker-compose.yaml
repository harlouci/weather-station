services:
  minio:
    image: gcr.io/ml-pipeline/minio:RELEASE.2019-08-14T20-37-41Z-license-compliance
    container_name: minio-service
    command:
      - server
      - /data
      - --address
      - :9000
    ports:
      - 31975:9000
    environment:
      - MINIO_ACCESS_KEY=minio7777
      - MINIO_SECRET_KEY=minio8858
    volumes:
      - ./minio_data:/data
  mlflow:
    build:
      context: .
      dockerfile: Dockerfile.mlflow
    ports:
      - "5000:5000"
    environment:
      - ARTIFACT_ROOT=/data/mlruns
      - BACKEND_URI=sqlite:////data/backend.db
    volumes:
      - ./mlflow:/data
  prefect-server:
    image: prefecthq/prefect:2-python3.11
    container_name: prefect-server
    ports:
      - 4200:4200
    volumes:
      - ./prefect:/opt/prefect/db_mnt
    command:
      - prefect
      - server
      - start
      - --host
      - 0.0.0.0
    environment:
      - "PREFECT_API_DATABASE_CONNECTION_URL=sqlite+aiosqlite:////opt/prefect/db_mnt/prefect.db"
      - PREFECT_SERVER_API_PORT=4200
      - PREFECT_SERVER_ANALYTICS_ENABLED=false
  # Long running .serve()
  # This container registers directly to Prefect
  # as an Agent.
  prefect-ml-pipeline-serving:
    build:
      dockerfile: Dockerfile.mlpipeline
    container_name: prefect-ml-pipeline-serving
    command:
      - python
      - -m
      - weather.pipelines.for_release.serve_full_pipeline
    working_dir: / # Note this is necessary because of Prefect's checks
    environment:
      - PREFECT_API_URL=http://host.docker.internal:4200/api
      - IVA_GX_PROJECT_ROOT_DIR=/app/gx/minio
      - FSSPEC_S3_KEY=minio7777
      - FSSPEC_S3_SECRET=minio8858
      - FSSPEC_S3_ENDPOINT_URL=http://host.docker.internal:31975
      - MLFLOW_TRACKING_URI=http://host.docker.internal:5000
      - MINIO_ACCESS_KEY=minio7777
      - MINIO_SECRET_KEY=minio8858
      - MINIO_API_HOST=host.docker.internal:31975
      - SERVER_API_URL=http://host.docker.internal:6000/reload
      - SCRATCH_DIR=/scratch # TODO: 11H
    depends_on:
      - prefect-server
      - mlflow
      - minio
      - server-fastapi
      - populate-bucket
  server-fastapi:
    environment:
      - FSSPEC_S3_KEY=minio7777
      - FSSPEC_S3_SECRET=minio8858
      - FSSPEC_S3_ENDPOINT_URL=http://host.docker.internal:31975
      - MODEL_REGISTRY_URI=http://host.docker.internal:5000
      - MODEL_STAGE=Production
      - MODEL_NAME=random_forest
      - TWILIO_ACCOUNT_SID=AC0d28ff9833ed345f96d36a6497c16cd7
      - TWILIO_AUTH_TOKEN=5b860afff92083034f99ba9a16a67400
      - TWILIO_PHONE=+16592353786
      - SEND_MESSAGE=False
      - SIMULATION_RAW_DATA_MINIO_FILE_PATH=s3://simul/weather_dataset_raw_production.csv
      - PRODUCTION_RAW_DATA_MINIO_FILE_PATH=s3://prod/weather_dataset_raw_production.csv
      - DEV_RAW_DATA_MINIO_FILE_PATH=s3://dev/weather_dataset_raw_development.csv
      - PROD_BUCKET=s3://prod/
      - MODEL_DIR=/models
    build:
      dockerfile: Dockerfile.server-fastapi
    container_name: server-fastapi
    ports:
      - 6000:6000
    volumes:
      - ./models:/models
    depends_on:
      - minio
      - populate-bucket
  weather-station:
    environment:
      - FAST_API_URL=http://host.docker.internal:6000/predict/ # localhost can be replaced by the service name "server-fastapi"
      - FSSPEC_S3_KEY=minio7777
      - FSSPEC_S3_SECRET=minio8858
      - FSSPEC_S3_ENDPOINT_URL=http://host.docker.internal:31975 # do not put minio or localhost..
      - SIMULATION_RAW_DATA_MINIO_FILE_PATH=s3://simul/weather_dataset_raw_production.csv
      - MAX_NUMBER_OF_ROWS=200
      - TIME_LOOP=1
      - LOG_LEVEL=INFO
    build:
      dockerfile: Dockerfile.weather-station
    container_name: weather-station
    depends_on:
      - mlflow
      - server-fastapi
      - minio
      - populate-bucket
  populate-bucket:
    environment:
      - MINIO_ACCESS_KEY=minio7777
      - MINIO_SECRET_KEY=minio8858
      - MINIO_API_HOST=host.docker.internal:31975
      - SIMULATION_RAW_DATA_MINIO_FILE_BUCKET=simul
      - USER_MINIO_FILE_BUCKET=user
      - START_DEV_RAW_DATA_MINIO_FILE_BUCKET=dev
      - START_PROD_RAW_DATA_MINIO_FILE_BUCKET=prod
      - START_MODEL_MINIO_FILE_BUCKET=model
      - SCRATCH_DIR=/scratch
    build:
      dockerfile: Dockerfile.populate-bucket
    command:
      - python
      - -m
      - weather.data.populate_bucket
    container_name: populate-bucket
    depends_on:
      - minio